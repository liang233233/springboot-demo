package ${package.Controller};

import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;
import java.util.List;
#if(${swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end
#if(${restControllerStyle})
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * $!{table.comment} 前端控制器
 *
 * @Author ${author}
 * @Version 1.0
 * @Date ${date}
 */
#if(${swagger2})
@Api(value = "$!{table.comment}接口API", tags = {"$!{table.comment}接口API"})
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private final static Logger LOGGER = LoggerFactory.getLogger(${table.controllerName}.class);

    #set($lowerCaseServiceName=${table.serviceName})
    #set($lowerCaseServiceName=$lowerCaseServiceName.substring(1))
    #set($lowerCaseServiceName=$lowerCaseServiceName.substring(0,1).toLowerCase()+$lowerCaseServiceName.substring(1))

    @Autowired
    private ${table.serviceName} ${lowerCaseServiceName};


    /**
     * 根据ID查询数据
     *
     * @param id
     * @return
     * @throws DefaultException
     */
    #if(${swagger2})
    @ApiOperation(value = "根据ID查询数据", notes = "根据ID查询数据")
    #end
    @GetMapping("getOne/{id}")
    public RespResult<${entity}> getOne(@PathVariable("id") String id) throws DefaultException {
        if (StringUtils.isEmpty(id)){
            throw new DefaultException(HttpStatus.INTERNAL_SERVER_ERROR, "请求参数为空~~~~~~");
        }
        LOGGER.info("入参为:[{}]", id);
        return RespResult.ok(this.${lowerCaseServiceName}.getById(id));
    }



    /**
     * 查询全部数据
     *
     * @return
     */
    #if(${swagger2})
    @ApiOperation(value = "查询全部数据", notes = "查询全部数据")
    #end
    @GetMapping("getAll")
    public RespResult<List<${entity}>> getAll() {
        return RespResult.ok(this.${lowerCaseServiceName}.list());
    }


    /**
     * 新增一条数据
     *
     * @param param
     * @return
     * @throws DefaultException
     */
    #if(${swagger2})
    @ApiOperation(value = "新增一条数据", notes = "新增一条数据")
    #end
    @PostMapping("add")
    public RespResult<Boolean> add(@RequestBody ${entity} param) throws DefaultException {
        if (ObjectUtils.isEmpty(param)) {
            throw new DefaultException(HttpStatus.INTERNAL_SERVER_ERROR, "请求参数为空~~~~~~");
        }
        LOGGER.info("入参为:[{}]", param);
        return RespResult.ok(this.${lowerCaseServiceName}.save(param));
    }


    /**
     * 修改一条数据
     *
     * @param param
     * @return
     * @throws DefaultException
     */
    #if(${swagger2})
    @ApiOperation(value = "修改一条数据", notes = "修改一条数据")
    #end
    @PatchMapping("edit")
    public RespResult<Boolean> edit(@RequestBody ${entity} param) throws DefaultException {
        if (ObjectUtils.isEmpty(param)) {
            throw new DefaultException(HttpStatus.INTERNAL_SERVER_ERROR, "请求参数为空~~~~~~");
        }
        LOGGER.info("入参为:[{}]", param);
        RespResult<Boolean> data = new RespResult<>();
        return RespResult.ok(this.${lowerCaseServiceName}.updateById(param));
    }


    /**
     * 根据ID删除数据
     *
     * @param id
     * @return
     * @throws DefaultException
     */
    #if(${swagger2})
    @ApiOperation(value = "根据ID删除数据", notes = "根据ID删除数据")
    #end
    @DeleteMapping("delete/{id}")
    public RespResult<Boolean> delete(@PathVariable("id") String id) throws DefaultException {
        if (StringUtils.isEmpty(id)){
            throw new DefaultException(HttpStatus.INTERNAL_SERVER_ERROR, "请求参数为空~~~~~~");
        }
        LOGGER.info("入参为:[{}]", id);
        return RespResult.ok(this.${lowerCaseServiceName}.removeById(id));
    }


}

#end